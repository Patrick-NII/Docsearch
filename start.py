#!/usr/bin/env python3
"""
Script de lancement rapide pour DocSearch AI
Lance l'API et effectue les v√©rifications n√©cessaires
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_requirements():
    """V√©rifie que tous les pr√©requis sont install√©s"""
    print("üîç V√©rification des pr√©requis...")
    
    # V√©rifier Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    # V√©rifier le fichier .env
    if not Path(".env").exists():
        print("‚ö†Ô∏è  Fichier .env non trouv√©")
        print("üìù Cr√©ation d'un fichier .env basique...")
        create_basic_env()
    
    # V√©rifier les d√©pendances
    try:
        import fastapi
        import langchain
        import openai
        print("‚úÖ D√©pendances Python install√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üí° Installez les d√©pendances avec: pip install -r requirements.txt")
        return False
    
    return True

def create_basic_env():
    """Cr√©e un fichier .env basique"""
    env_content = """# OpenAI Configuration
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-3.5-turbo
OPENAI_TEMPERATURE=0.7
OPENAI_MAX_TOKENS=2000

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_TOKEN=your-secret-api-token-here

# Autres configurations par d√©faut
VECTOR_DB_PATH=./vector_db
SOURCE_DIR=./source
CHUNK_SIZE=1000
TOP_K_RESULTS=5
MAX_FILE_SIZE=50
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env cr√©√©")
    print("‚ö†Ô∏è  N'oubliez pas de configurer votre cl√© API OpenAI !")

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    print("üìÅ Cr√©ation des r√©pertoires...")
    
    directories = [
        "source",
        "vector_db", 
        "uploads",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ R√©pertoire {directory} cr√©√©")

def run_tests():
    """Lance les tests rapides"""
    print("üß™ Lancement des tests rapides...")
    
    try:
        result = subprocess.run([sys.executable, "test_ai_system.py"], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ Tests r√©ussis")
            return True
        else:
            print("‚ö†Ô∏è  Tests avec avertissements")
            print(result.stdout)
            return True  # Continuer m√™me avec des warnings
            
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  Tests interrompus (timeout)")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

def start_api():
    """Lance l'API"""
    print("üöÄ Lancement de l'API DocSearch AI...")
    print("üì° API accessible sur: http://localhost:8000")
    print("üìñ Documentation: http://localhost:8000/docs")
    print("üîç Health check: http://localhost:8000/health")
    print("\n‚èπÔ∏è  Appuyez sur Ctrl+C pour arr√™ter")
    print("-" * 50)
    
    try:
        # Lancer l'API avec uvicorn
        subprocess.run([
            sys.executable, "-m", "uvicorn", 
            "api_server:app",
            "--host", "0.0.0.0",
            "--port", "8000",
            "--reload"
        ])
    except KeyboardInterrupt:
        print("\nüëã Arr√™t de l'API")
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")

def main():
    """Fonction principale"""
    print("üß† DOCSEARCH AI - LANCEUR RAPIDE")
    print("=" * 40)
    
    # V√©rifications
    if not check_requirements():
        print("\n‚ùå Pr√©requis non satisfaits")
        sys.exit(1)
    
    # Cr√©er les r√©pertoires
    create_directories()
    
    # Tests optionnels
    print("\nüß™ Voulez-vous lancer les tests ? (y/n): ", end="")
    if input().lower().startswith('y'):
        if not run_tests():
            print("‚ùå Tests √©chou√©s")
            sys.exit(1)
    
    # Lancer l'API
    print("\n" + "=" * 40)
    start_api()

if __name__ == "__main__":
    main() 